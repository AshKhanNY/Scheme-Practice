; Homework 1
; Spring 2021

; Please have a look at the notes for lectures 1, 2 and 3

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; homework at the end of lecture1.scm

;; You should read Sections 1.1.1 through 1.1.6, and solve Exercises
;; 1.1 through 1.5, in Abelson and Sussman.

;; To prepare for the next class, read Sections 1.1.7 and 1.1.8, as well
;; as Section 1.2.1.


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; homework at the end of lecture2.scm

;; in preparation for the next class, please read, in Abelson and Sussman, Section 1.2.1


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; homework at the end of lecture3.scm

;; 1. Exercise 1.7 from A&S
;; 2. Exercise 1.8 from A&S
;
;; 3. Exercise 1.9 from A&S, with additional requirements
;
;; consider two procedures for adding two positive integers
;

(define (my-plus-version-1 a b)
  (if (= a 0)
      b
      (inc (my-plus-version-1 (dec a) b))))

; PROOF FOR RECURSIVE PROCESS ABOVE

; Basis Step: Start with smallest legal input (a = 0, b = n)
;             Observe that (my-plus-version-1 0 n) = n, so it's correct.

; Induction Hypothesis: Assume (my-plus-version-1 k n) works correctly, so
;             the value returned by the call (my-plus-version-1 k n) is the
;             sum, which is k + n.

; Induction Step: We show, using the IH, that (my-plus-version-1 k+1 n) works
;             correctly. According to the code, (my-plus-version-1 k+1 n)
;             returns (inc (my-plus-version-1 (dec k+1) n)). Since this works
;             in applicative order, we can rewrite this as:
;             (inc (my-plus-version-1 k n)). By the IH, (my-plus-version-1 k n)
;             is k + n, so we can, again, rewrite this as:
;             (inc (k + n))
;             Following this call, we have a returned value of k + n + 1, which
;             is certainly the sum of k + 1 and n.

; Extra Notes: To show that this program terminates, we can clarify that a >= 0,
;             thus every call, as shown in the code, decriments the value of a
;             until it reaches the base case of 0.

(define (my-plus-version-2 a b)
  (if (= a 0)
      b
      (my-plus-version-2 (dec a) (inc b))))

; PROOF FOR ITERATIVE PROCESS ABOVE

; Guess-invariant for my-plus-version-2: a + b = (a - 1) + (b + 1)

; First Check: Guess-invariant strong enough to imply desired result upon
; termination?
; Termination occurs when a = 0. When a is 0, 0 + b = (0 - 1) + (b + 1)
; This simplifies to b = b, which is true.

;; where

(define (inc x) (+ x 1))

(define (dec x) (- x 1))



;; Using the substitution model, illustrate the process generated by each
;; procedure in evaluating (my-plus 4 5).  Are the processes recursive or
;; iterative?
;
;; Certify each procedure, using the appropriate technique, as determined
;; by your answer to the classification question above: for the recursive
;; procedure, give a proof based on the size of (one of) the arguments; for
;; the iterative procedure, give a proof which uses an invariant (which you
;; must first discover)
